services:
  # Kafka with KRaft
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      CLUSTER_ID: Zk3j7b8SRaGm5hX9Y2F7Yw==
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    volumes:
      - ./init-kafka-topics.sh:/docker-entrypoint-initdb.d/init-kafka-topics.sh
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Topic Initializer
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c '
        echo "Waiting for Kafka to be ready..."
        sleep 5
        
        echo "Creating Kafka topics..."
        
        kafka-topics --create --bootstrap-server kafka:29092 --topic order-events --partitions 3 --replication-factor 1 --if-not-exists --config retention.ms=604800000
        echo "✓ Created order-events topic"
        
        kafka-topics --create --bootstrap-server kafka:29092 --topic payment-events --partitions 3 --replication-factor 1 --if-not-exists --config retention.ms=604800000
        echo "✓ Created payment-events topic"
        
        kafka-topics --create --bootstrap-server kafka:29092 --topic dead-letter-queue --partitions 1 --replication-factor 1 --if-not-exists --config retention.ms=2592000000
        echo "✓ Created dead-letter-queue topic"
        
        echo "Listing all topics:"
        kafka-topics --list --bootstrap-server kafka:29092
        
        echo "Kafka topics initialization completed!"
      '
    restart: "no"

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      - kafka

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: eventdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      LOKI_URL: http://loki:3100
      TEMPO_URL: http://grafana-agent:9411
      ORDER_SERVICE_URL: http://order-service:8081
    depends_on:
      kafka:
        condition: service_healthy
      order-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8081:8081"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      LOKI_URL: http://loki:3100
      TEMPO_URL: http://grafana-agent:9411
      PAYMENT_SERVICE_URL: http://payment-service:8082
    depends_on:
      kafka:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8082:8082"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      POSTGRES_URL: jdbc:postgresql://postgres:5432/eventdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      LOKI_URL: http://loki:3100
      TEMPO_URL: http://grafana-agent:9411
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LGTM Stack - Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LGTM Stack - Tempo
  tempo:
    image: grafana/tempo:2.2.0
    container_name: tempo
    ports:
      - "3200:3200"
      - "4317:4317"
      - "14268:14268"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./monitoring/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LGTM Stack - Mimir
  mimir:
    image: grafana/mimir:2.10.0
    container_name: mimir
    ports:
      - "9009:9009"
    command: ["-config.file=/etc/mimir.yaml"]
    volumes:
      - ./monitoring/mimir.yaml:/etc/mimir.yaml
      - mimir-data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9009/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Agent for metrics, logs, and traces
  grafana-agent:
    image: grafana/agent:v0.37.0
    container_name: grafana-agent
    ports:
      - "9411:9411"
    command:
      - '-config.file=/etc/agent/agent.yaml'
      - '-server.http.address=0.0.0.0:12345'
    volumes:
      - ./monitoring/grafana-agent.yaml:/etc/agent/agent.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      mimir:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy

  # LGTM Stack - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - loki
      - tempo
      - mimir
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

volumes:
  kafka-data:
  postgres-data:
  loki-data:
  tempo-data:
  mimir-data:
  grafana-data:

networks:
  default:
    name: event-driven-network
